Turbo Assembler	 Version 4.1	    02/19/22 16:12:30	    Page 1
str.asm



      1				     ; strlen strchr strncpy strncmp atoi itoa (2, 8, 10, 16)
      2
      3	0000			     .model tiny
      4	0000			     .code
      5				     org 100h
      6
      7				     locals @@
      8
      9				     ;------------------------------------------------
     10				     ; CONSTANTS
     11				     ;------------------------------------------------
     12	      =0009		     PUTS equ 09h
     13				     ;------------------------------------------------
     14
     15	0100			     start:
     16	0100  E9 00C2		     jmp main
     17
     18				     ;------------------------------------------------
     19				     ; STRLEN
     20				     ; Computes	length of string (end is '$' sym)
     21				     ;	 si - ptr of str
     22				     ;	 dl = 0
     23				     ; RET: dl - len
     24				     ; CHANGED:	si
     25				     ;------------------------------------------------
     26	0103			     strlen proc
     27	0103				 @@loop:
     28	0103  83 3C 24			     cmp ds:[si], '$'
*Warning* str.asm(28) Argument needs type override
     29	0106  74 05			     je	@@ret
     30
     31	0108  46			     inc si
     32	0109  FE C2			     inc dl
     33	010B  EB F6			 jmp @@loop
     34
     35	010D			     @@ret:
     36	010D  C3			 ret
     37	010E			     strlen endp
     38
     39				     ;------------------------------------------------
     40				     ; STRCHR
     41				     ; Finds first character in	str (end is '$'	sym)
     42				     ;	 si - ptr of str
     43				     ;	 dl - sym to find
     44				     ; RET: si - ptr to	char
     45				     ; CHANGED:	si
     46				     ;------------------------------------------------
     47	010E			     strchr proc
     48	010E				 @@loop:
     49					     ; end of string
     50	010E  83 3C 24			     cmp ds:[si], '$'
*Warning* str.asm(50) Argument needs type override
     51	0111  74 07			     je	@@ret
     52
     53					     ; needed character
     54	0113  38 14			     cmp ds:[si], dl
     55	0115  74 03			     je	@@ret
Turbo Assembler	 Version 4.1	    02/19/22 16:12:30	    Page 2
str.asm



     56
     57	0117  46			     inc si
     58	0118  EB F4			 jmp @@loop
     59
     60	011A			     @@ret:
     61	011A  C3			 ret
     62	011B			     strchr endp
     63
     64				     ;------------------------------------------------
     65				     ; STRNCPY
     66				     ; Copies no more than cx symbols from si to di
     67				     ;	 si - ptr of source
     68				     ;	 di - ptr of destination
     69				     ;	 cx - num of symbols to	copy
     70				     ; RET: di - end of	copied str
     71				     ; CHANGED:	si, di,	cx, al
     72				     ;------------------------------------------------
     73	011B			     strncpy proc
     74	011B				 @@loop:
     75	011B  8A 04			     mov al, ds:[si]
     76	011D  88 05			     mov ds:[di], al
     77
     78					     ; returns only after copying end of str if	there is
     79	011F  83 3C 24			     cmp ds:[si], '$'
*Warning* str.asm(79) Argument needs type override
     80	0122  74 04			     je	@@ret
     81
     82	0124  46			     inc si
     83	0125  47			     inc di
     84	0126  E2 F3			 loop @@loop
     85
     86	0128			     @@ret:
     87	0128  C3			 ret
     88	0129			     strncpy endp
     89
     90				     ;------------------------------------------------
     91				     ; STRNCMP
     92				     ; Compares	at most	cx characters of two strings
     93				     ;	 si - frst str
     94				     ;	 di - scnd str
     95				     ;	 cx - num of symbols to	cmp
     96				     ; RET: al - res
     97				     ; CHANGED:	si, di,	cx
     98				     ;------------------------------------------------
     99	0129			     strncmp proc
    100	0129				 @@loop:
    101	0129  8A 05			     mov al, ds:[di]
    102	012B  38 04			     cmp ds:[si], al
    103	012D  75 09			     jne @@ret
    104
    105	012F  83 3C 24			     cmp ds:[si], '$'
*Warning* str.asm(105) Argument	needs type override
    106	0132  74 04			     je	@@ret
    107
    108	0134  46			     inc si
    109	0135  47			     inc di
    110	0136  E2 F1			 loop @@loop
Turbo Assembler	 Version 4.1	    02/19/22 16:12:30	    Page 3
str.asm



    111
    112	0138			     @@ret:
    113	0138  8A 04			 mov al, ds:[si]
    114	013A  2A 05			 sub al, ds:[di]
    115	013C  C3			 ret
    116	013D			     strncmp endp
    117
    118				     ;------------------------------------------------
    119				     ; ATOI
    120				     ; Calculates unsigned number at si	with base cx
    121				     ;	 si - ptr of str
    122				     ;	 cx - base
    123				     ;	 bx = 0
    124				     ; RET: bx - calculated num
    125				     ; CHANGED:	si, dx,	ax
    126				     ;------------------------------------------------
    127	013D			     atoi proc
    128	013D				 @@loop:
    129					     ; returns if end of str
    130	013D  8A 04			     mov al, ds:[si] ; this is needed because we should	compare	only one byte but not a	word
    131	013F  3C 24			     cmp al, '$'
    132	0141  74 12			     je	@@ret
    133
    134	0143  8B C1			     mov ax, cx
    135	0145  F7 E3			     mul bx	 ; ax*=bx, dx is filled	with overflow of mul
    136	0147  8B D8			     mov bx, ax
    137
    138					     ; is it okay to do	like this?
    139	0149  B6 00			     mov dh, 0
    140	014B  8A 14			     mov dl, ds:[si]
    141	014D  80 EA 30			     sub dl, '0'
    142	0150  03 DA			     add bx, dx
    143
    144	0152  46			     inc si
    145	0153  EB E8			 jmp @@loop
    146
    147	0155			     @@ret:
    148	0155  C3			 ret
    149	0156			     atoi endp
    150
    151				     ;------------------------------------------------
    152				     ; ATOI2N
    153				     ; Calculates unsigned number at si	with base 2^cl
    154				     ;	 si - ptr of str
    155				     ;	 cl - power of base
    156				     ;	 bx = 0
    157				     ;	 ah = 0
    158				     ; RET: bx - calculated num
    159				     ; CHANGED:	si, ax
    160				     ;------------------------------------------------
    161	0156			     atoi2n proc
    162	0156				 @@loop:
    163					     ; returns if end of str
    164	0156  8A 04			     mov al, ds:[si] ; this is needed because we should	compare	only one byte but not a	word
    165	0158  3C 24			     cmp al, '$'
    166	015A  74 09			     je	@@ret
    167
Turbo Assembler	 Version 4.1	    02/19/22 16:12:30	    Page 4
str.asm



    168	015C  D3 E3			     shl bx, cl	     ; bx *= 2^cl
    169	015E  2C 30			     sub al, '0'
    170	0160  03 D8			     add bx, ax
    171
    172	0162  46			     inc si
    173	0163  EB F1			 jmp @@loop
    174
    175	0165			     @@ret:
    176	0165  C3			 ret
    177	0166			     atoi2n endp
    178
    179				     ;------------------------------------------------
    180				     ; ITOA
    181				     ; Translates unsigned bx number to	str pointed by di with base cx and places $ at the end
    182				     ;	 di - ptr of str to be written
    183				     ;	 cx - base
    184				     ;	 ax - number to	be translated
    185				     ; RET: PROBABLY di	- ptr to the symbol next to last number	sym
    186				     ; CHANGED:	bx, dx
    187				     ;------------------------------------------------
    188	0166			     itoa proc
    189					 ; TODO	check if number	is zero
    190					 ; TODO	check if it works properly on 1	integer	number
    191	0166  8B F7			 mov si, di
    192
    193	0168				 @@loop:
    194	0168  BA 0000			     mov dx, 0
    195	016B  F7 F1			     div cx	 ; ax =	dx:ax div cx, dx = dx:ax % cx
    196	016D  8B DA			     mov bx, dx
    197	016F  8A 97 0200r		     mov dl, ds:[bx + offset XlatTable]
    198
    199	0173  88 15			     mov ds:[di], dl
    200	0175  47			     inc di
    201
    202	0176  3D 0000			     cmp ax, 0
    203	0179  74 02			     je	@@end_loop
    204	017B  EB EB			 jmp @@loop
    205
    206	017D				 @@end_loop:
    207	017D  8B CF			 mov cx, di
    208	017F  2B CE			 sub cx, si
    209	0181  D1 E9			 shr cx, 1
    210	0183  C7 05 0024		 mov ds:[di], '$'
*Warning* str.asm(210) Argument	needs type override
    211	0187  4F			 dec di
    212
    213	0188				 @@reverse:
    214	0188  8A 05			     mov al, ds:[di]
    215	018A  86 04			     xchg ds:[si], al
    216	018C  88 05			     mov ds:[di], al
    217
    218	018E  4F			     dec di
    219	018F  46			     inc si
    220	0190  E2 F6			 loop @@reverse
    221
    222	0192			     @@ret:
    223	0192  C3			 ret
Turbo Assembler	 Version 4.1	    02/19/22 16:12:30	    Page 5
str.asm



    224	0193			     itoa endp
    225
    226				     ;------------------------------------------------
    227				     ; ITOA2N
    228				     ; Translates unsigned bx number to	str pointed by di with base 2^cl and places $ at the end
    229				     ;	 di - ptr of str to be written
    230				     ;	 cl - power of base
    231				     ;	 ax - number to	be translated
    232				     ;	 bh = 0
    233				     ; CHANGED:	bx, dx
    234				     ;------------------------------------------------
    235	0193			     itoa2n proc
    236					 ; TODO	check if number	is zero
    237					 ; TODO	check if it works properly on 1	integer	number
    238	0193  8B F7			 mov si, di
    239	0195  BA 0001			 mov dx, 1
    240	0198  D3 E2			 shl dx, cl
    241	019A  4A			 dec dx	     ; dx = 2^cl - 1
    242
    243	019B				 @@loop:
    244	019B  8B D8			     mov bx, ax
    245	019D  23 DA			     and bx, dx	     ; bx = ax % 2^cl
    246	019F  D3 E8			     shr ax, cl	     ; ax = ax / 2^cl
    247
    248	01A1  8A 9F 0200r		     mov bl, ds:[bx + offset XlatTable]
    249	01A5  88 1D			     mov ds:[di], bl
    250	01A7  47			     inc di
    251
    252	01A8  3D 0000			     cmp ax, 0
    253	01AB  74 02			     je	@@end_loop
    254	01AD  EB EC			 jmp @@loop
    255
    256					 ; TODO	is it okay to have copypaste like this?
    257	01AF				 @@end_loop:
    258	01AF  8B CF			 mov cx, di
    259	01B1  2B CE			 sub cx, si
    260	01B3  D1 E9			 shr cx, 1
    261	01B5  C7 05 0024		 mov ds:[di], '$'
*Warning* str.asm(261) Argument	needs type override
    262	01B9  4F			 dec di
    263
    264	01BA				 @@reverse:
    265	01BA  8A 05			     mov al, ds:[di]
    266	01BC  86 04			     xchg ds:[si], al
    267	01BE  88 05			     mov ds:[di], al
    268
    269	01C0  4F			     dec di
    270	01C1  46			     inc si
    271	01C2  E2 F6			 loop @@reverse
    272
    273	01C4			     @@ret:
    274	01C4  C3			 ret
    275	01C5			     itoa2n endp
    276
    277	01C5			     main:
    278	01C5  BF 0210r			 mov di, offset	end_of_file
    279	01C8  B9 0003			 mov cx, 3
Turbo Assembler	 Version 4.1	    02/19/22 16:12:30	    Page 6
str.asm



    280	01CB  B8 0017			 mov ax, 23
    281	01CE  E8 FFC2			 call itoa2n
    282
    283	01D1  BE 0210r			 mov si, offset	end_of_file
    284	01D4  B9 0003			 mov cx, 3
    285	01D7  BB 0000			 mov bx, 0
    286	01DA  B4 00			 mov ah, 0
    287	01DC  E8 FF77			 call atoi2n
    288
    289	01DF  BF 0210r			 mov di, offset	end_of_file
    290	01E2  B9 000A			 mov cx, 10
    291	01E5  8B C3			 mov ax, bx
    292	01E7  E8 FF7C			 call itoa
    293
    294	01EA  B4 09			 mov ah, PUTS
    295	01EC  BA 0210r			 mov dx, offset	end_of_file
    296	01EF  CD 21			 int 21h
    297
    298	01F1			     @@ret:  ; exit 0
    299	01F1  B8 4C00			 mov ax, 4c00h
    300	01F4  CD 21			 int 21h
    301
    302	01F6  31 30 30 24		 text db "100$"
    303	01FA  31 32 33 34 37 24		 secnd db "12347$"
    304	0200  30 31 32 33 34 35	36+	 XlatTable db "0123456789ABCDEF"
    305	      37 38 39 41 42 43	44+
    306	      45 46
    307	0210  00			 end_of_file db	0
    308
    309				     end start
Turbo Assembler	 Version 4.1	    02/19/22 16:12:30	    Page 7
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/19/22"
??FILENAME			  Text	 "str	  "
??TIME				  Text	 "16:12:30"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@END_LOOP			  Near	 DGROUP:017D
@@END_LOOP			  Near	 DGROUP:01AF
@@LOOP				  Near	 DGROUP:0103
@@LOOP				  Near	 DGROUP:010E
@@LOOP				  Near	 DGROUP:011B
@@LOOP				  Near	 DGROUP:0129
@@LOOP				  Near	 DGROUP:013D
@@LOOP				  Near	 DGROUP:0156
@@LOOP				  Near	 DGROUP:0168
@@LOOP				  Near	 DGROUP:019B
@@RET				  Near	 DGROUP:010D
@@RET				  Near	 DGROUP:011A
@@RET				  Near	 DGROUP:0128
@@RET				  Near	 DGROUP:0138
@@RET				  Near	 DGROUP:0155
@@RET				  Near	 DGROUP:0165
@@RET				  Near	 DGROUP:0192
@@RET				  Near	 DGROUP:01C4
@@RET				  Near	 DGROUP:01F1
@@REVERSE			  Near	 DGROUP:0188
@@REVERSE			  Near	 DGROUP:01BA
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 STR
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ATOI				  Near	 DGROUP:013D
ATOI2N				  Near	 DGROUP:0156
END_OF_FILE			  Byte	 DGROUP:0210
ITOA				  Near	 DGROUP:0166
ITOA2N				  Near	 DGROUP:0193
MAIN				  Near	 DGROUP:01C5
PUTS				  Number 0009
SECND				  Byte	 DGROUP:01FA
START				  Near	 DGROUP:0100
STRCHR				  Near	 DGROUP:010E
STRLEN				  Near	 DGROUP:0103
STRNCMP				  Near	 DGROUP:0129
STRNCPY				  Near	 DGROUP:011B
TEXT				  Byte	 DGROUP:01F6
XLATTABLE			  Byte	 DGROUP:0200
Turbo Assembler	 Version 4.1	    02/19/22 16:12:30	    Page 8
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  0211 Word	  Public  CODE
Turbo Assembler	 Version 4.1	    02/19/22 16:12:30	    Page 9
Error Summary



*Warning* str.asm(28) Argument needs type override
*Warning* str.asm(50) Argument needs type override
*Warning* str.asm(79) Argument needs type override
*Warning* str.asm(105) Argument	needs type override
*Warning* str.asm(210) Argument	needs type override
*Warning* str.asm(261) Argument	needs type override
