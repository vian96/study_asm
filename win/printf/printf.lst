     1                                  global printf
     2                                  
     3                                  extern GetStdHandle
     4                                  extern WriteConsoleA
     5                                  extern ExitProcess
     6                                  
     7                                  ; First arg is str and second is length
     8                                  %macro WRITE 2
     9                                  ; WriteConsole( STD_OUTPUT_HANDLE, strbuffer, numofchar, numwritten, double 0)
    10                                          push    dword 0         
    11                                          push    numCharsWritten
    12                                          push    dword %2    
    13                                          push    dword %1             
    14                                          push    dword    [STDOutputHandle]
    15                                          call    WriteConsoleA
    16                                  %endmacro ; WRITE
    17                                  
    18                                  %define DEB     WRITE DEBSTR, 4
    19                                  
    20                                  section .data
    21                                  
    22                                  section .bss
    23 00000000 ????????                        numCharsWritten     resd 1
    24 00000004 ????????                        STDOutputHandle     resd 1
    25                                  
    26 00000008 <res 28h>                       itoaBuff            resb 40 ; because 32 + some buffer space
    27 00000030 ????????                        ret_addr            resd 1
    28                                  
    29                                  
    30                                  section .text
    31                                  
    32                                  %include "itoa.asm"
    33                              <1> ;------------------------------------------------
    34                              <1> ; ITOA
    35                              <1> ; Translates unsigned bx number to str pointed by di with base cx and places $ at the end
    36                              <1> ;   edi - ptr of str to be written
    37                              <1> ;   ecx - base
    38                              <1> ;   eax - number to be translated
    39                              <1> ; CHANGED: ebx, edx, edi, esi
    40                              <1> ; RETURNED: eax - length
    41                              <1> ;------------------------------------------------
    42                              <1> itoa:
    43 00000000 39C8                <1>     cmp eax, ecx
    44 00000002 7F12                <1>     jg .main_itoa
    45                              <1> 
    46 00000004 8A90[A4000000]      <1>     mov dl, [eax + XlatTable]
    47 0000000A 8817                <1>     mov [edi], dl
    48 0000000C C6470100            <1>     mov byte [edi+1], 0
    49 00000010 B801000000          <1>     mov eax, 1
    50 00000015 C3                  <1>     ret
    51                              <1> 
    52                              <1> .main_itoa:
    53 00000016 89FE                <1>     mov esi, edi
    54                              <1> 
    55                              <1>     .loop:
    56 00000018 BA00000000          <1>         mov edx, 0
    57 0000001D F7F1                <1>         div ecx              ; eax = edx:eax div ecx, edx = edx:eax % ecx
    58 0000001F 89D3                <1>         mov ebx, edx
    59 00000021 8A93[A4000000]      <1>         mov dl, [ebx + XlatTable]
    60                              <1> 
    61 00000027 8817                <1>         mov [edi], dl
    62 00000029 47                  <1>         inc edi
    63                              <1> 
    64 0000002A 83F800              <1>         cmp eax, 0
    65 0000002D 7402                <1>         je .end_loop
    66 0000002F EBE7                <1>     jmp .loop
    67                              <1> 
    68                              <1> .end_loop:
    69 00000031 89F9                <1>     mov ecx, edi
    70 00000033 29F1                <1>     sub ecx, esi
    71 00000035 D1E9                <1>     shr ecx, 1
    72 00000037 C60700              <1>     mov byte [edi], 0
    73 0000003A 89FA                <1>     mov edx, edi
    74 0000003C 29F2                <1>     sub edx, esi
    75 0000003E 4F                  <1>     dec edi
    76                              <1> 
    77                              <1>     .reverse_ans:
    78 0000003F 8A07                <1>         mov al, [edi]
    79 00000041 8606                <1>         xchg [esi], al
    80 00000043 8807                <1>         mov [edi], al
    81                              <1> 
    82 00000045 4F                  <1>         dec edi
    83 00000046 46                  <1>         inc esi
    84 00000047 E2F6                <1>     loop .reverse_ans
    85                              <1> 
    86 00000049 89D0                <1>     mov eax, edx ; returned value is length
    87 0000004B C3                  <1>     ret
    88                              <1> 
    89                              <1> ; end of itoa
    90                              <1> 
    91                              <1> 
    92                              <1> ;------------------------------------------------
    93                              <1> ; ITOA2N
    94                              <1> ; Translates unsigned bx number to str pointed by di with base 2^cl and places $ at the end
    95                              <1> ;   di - ptr of str to be written
    96                              <1> ;   cl - power of base
    97                              <1> ;   ax - number to be translated
    98                              <1> ;   bh = 0
    99                              <1> ; CHANGED: bx, dx, di, si
   100                              <1> ;------------------------------------------------
   101                              <1> itoa2n:
   102 0000004C BB01000000          <1>     mov ebx, 1
   103 00000051 D3E3                <1>     shl ebx, cl
   104 00000053 39D8                <1>     cmp eax, ebx
   105 00000055 7F12                <1>     jg .main_itoa2n
   106                              <1> 
   107 00000057 8A90[A4000000]      <1>     mov dl, [eax + XlatTable]
   108 0000005D 8817                <1>     mov [edi], dl
   109 0000005F C6470100            <1>     mov byte [edi+1], 0
   110 00000063 B801000000          <1>     mov eax, 1
   111 00000068 C3                  <1>     ret
   112                              <1> 
   113                              <1> .main_itoa2n:
   114 00000069 89FE                <1>     mov esi, edi
   115 0000006B BA01000000          <1>     mov edx, 1
   116 00000070 D3E2                <1>     shl edx, cl
   117 00000072 4A                  <1>     dec edx                  ; dx = 2^cl - 1
   118                              <1> 
   119                              <1>     .loop:
   120 00000073 89C3                <1>         mov ebx, eax
   121 00000075 21D3                <1>         and ebx, edx          ; bx = ax % 2^cl
   122 00000077 D3E8                <1>         shr eax, cl          ; ax = ax / 2^cl
   123                              <1> 
   124 00000079 8A9B[A4000000]      <1>         mov bl, [ebx + XlatTable]
   125 0000007F 881F                <1>         mov [edi], bl
   126 00000081 47                  <1>         inc edi
   127                              <1> 
   128 00000082 83F800              <1>         cmp eax, 0
   129 00000085 7402                <1>         je .end_loop
   130 00000087 EBEA                <1>     jmp .loop
   131                              <1> 
   132                              <1>     ; TODO is it okay to have copypaste like this?
   133                              <1>     .end_loop:
   134 00000089 89F9                <1>     mov ecx, edi
   135 0000008B 29F1                <1>     sub ecx, esi
   136 0000008D D1E9                <1>     shr ecx, 1
   137 0000008F C60700              <1>     mov byte [edi], 0
   138 00000092 89FA                <1>     mov edx, edi
   139 00000094 29F2                <1>     sub edx, esi
   140 00000096 4F                  <1>     dec edi
   141                              <1> 
   142                              <1>     .reverse:
   143 00000097 8A07                <1>         mov al, [edi]
   144 00000099 8606                <1>         xchg [esi], al
   145 0000009B 8807                <1>         mov [edi], al
   146                              <1> 
   147 0000009D 4F                  <1>         dec edi
   148 0000009E 46                  <1>         inc esi
   149 0000009F E2F6                <1>     loop .reverse
   150                              <1> 
   151 000000A1 89D0                <1>     mov eax, edx ; returned value is length
   152 000000A3 C3                  <1>     ret
   153                              <1> 
   154                              <1> ; end of itoa2n
   155                              <1> 
   156 000000A4 303132333435363738- <1>     XlatTable db '0123456789ABCDEF'
   156 000000AD 39414243444546      <1>
    33                                  
    34                                  ;------------------------------------------------
    35                                  ; STRLEN
    36                                  ; edi - source of str
    37                                  ; CHANGED: ecx, edi, eax, ebx
    38                                  ; RETURN: eax - len
    39                                  ;------------------------------------------------
    40                                  strlen:
    41                                      ; TODO check flags of direction
    42 000000B4 89FB                        mov     ebx, edi
    43 000000B6 30C0                        xor     al, al  
    44 000000B8 B9FFFFFFFF                  mov     ecx, 0xffffffff
    45                                  
    46 000000BD F2AE                        repne   scasb   ; while [edi] != al
    47                                  
    48 000000BF 29DF                        sub     edi, ebx     
    49 000000C1 89F8                        mov     eax, edi     
    50 000000C3 48                          dec eax
    51                                  
    52 000000C4 C3                          ret         
    53                                  ; end of strlen 
    54                                  
    55                                  ;------------------------------------------------
    56                                  ; MACRO FOR PRINTF
    57                                  ; Writes ecx symbols from esi and see code, its simple
    58                                  ;------------------------------------------------
    59                                  %macro WRITE_BUF 0
    60                                      WRITE edi, ecx
    61                                      xor ecx, ecx
    62                                      mov edi, esi
    63                                      add edi, 2      ; to move from % to actual string
    64                                  %endmacro ; WRITE_BUF
    65                                  
    66                                  ;------------------------------------------------
    67                                  ; MACRO FOR PRINTF
    68                                  ; Macro for printing hex, oct and bin
    69                                  ; Uses the first arg as power
    70                                  ;------------------------------------------------
    71                                  %macro PRINT_2N 1
    72                                      pop     eax
    73                                      push    esi
    74                                      push    edi
    75                                      push    ecx
    76                                      push    edx
    77                                  
    78                                      mov     edi, itoaBuff
    79                                      mov     ecx, %1
    80                                      xor     bh, bh
    81                                      call    itoa2n
    82                                      WRITE   itoaBuff, eax
    83                                  
    84                                      pop     edx
    85                                      pop     ecx
    86                                      pop     edi
    87                                      pop     esi
    88                                      jmp     .printf_loop
    89                                  %endmacro ; PRINT_2N
    90                                  
    91                                  ;------------------------------------------------
    92                                  ; PRINTF
    93                                  ; 
    94                                  ; CHANGED: esi, eax, dl, ecx, ebx, edx
    95                                  ;------------------------------------------------
    96                                  printf:
    97                                      ; TODO fix for __cedcl (add esp, n*4)
    98                                      ; esi is where we read string
    99 000000C5 BA04000000                  mov     edx, 4   ; 4 for adresses
   100 000000CA 59                          pop     ecx
   101 000000CB 890D[30000000]              mov     [ret_addr], ecx
   102 000000D1 5E                          pop     esi
   103 000000D2 89F7                        mov     edi, esi
   104 000000D4 4E                          dec     esi      ; useful because you do not need to inc it befoure calling loop
   105 000000D5 31C9                        xor     ecx, ecx
   106                                  
   107                                      .printf_loop:
   108 000000D7 46                              inc     esi
   109 000000D8 8A06                            mov     al, [esi]
   110 000000DA 3C25                            cmp     al, '%'
   111 000000DC 7436                            je      .codes
   112                                  
   113 000000DE 3C00                            cmp     al, 0
   114 000000E0 7403                            je      .ret
   115                                  
   116 000000E2 41                              inc ecx
   117 000000E3 EBF2                            jmp     .printf_loop
   118                                  
   119                                  .ret:
   120                                      WRITE_BUF
    60                              <1>  WRITE edi, ecx
     9                              <2> 
    10 000000E5 6A00                <2>  push dword 0
    11 000000E7 68[00000000]        <2>  push numCharsWritten
    12 000000EC 51                  <2>  push dword %2
    13 000000ED 57                  <2>  push dword %1
    14 000000EE FF35[04000000]      <2>  push dword [STDOutputHandle]
    15 000000F4 E8(00000000)        <2>  call WriteConsoleA
    61 000000F9 31C9                <1>  xor ecx, ecx
    62 000000FB 89F7                <1>  mov edi, esi
    63 000000FD 83C702              <1>  add edi, 2
   121 00000100 01D4                        add     esp, edx 
   122 00000102 8B0D[30000000]              mov     ecx, [ret_addr]
   123 00000108 51                          push    ecx
   124 00000109 C3                          ret
   125                                  
   126                                  .jmp_percent:
   127 0000010A E96A010000                  jmp     .percent
   128                                  
   129                                  .jmp_default:
   130 0000010F E98D010000                  jmp     .default
   131                                  
   132                                  .codes:
   133 00000114 83C204                      add edx, 4
   134                                      WRITE_BUF
    60                              <1>  WRITE edi, ecx
     9                              <2> 
    10 00000117 6A00                <2>  push dword 0
    11 00000119 68[00000000]        <2>  push numCharsWritten
    12 0000011E 51                  <2>  push dword %2
    13 0000011F 57                  <2>  push dword %1
    14 00000120 FF35[04000000]      <2>  push dword [STDOutputHandle]
    15 00000126 E8(00000000)        <2>  call WriteConsoleA
    61 0000012B 31C9                <1>  xor ecx, ecx
    62 0000012D 89F7                <1>  mov edi, esi
    63 0000012F 83C702              <1>  add edi, 2
   135                                  
   136 00000132 46                          inc     esi
   137 00000133 8A06                        mov     al, [esi]
   138                                  
   139 00000135 3C25                        cmp     al, '%'
   140 00000137 74D1                        je      .jmp_percent
   141 00000139 3C62                        cmp     al, 'b'
   142 0000013B 7CD2                        jl      .jmp_default    ; less than 'b'
   143 0000013D 3C78                        cmp     al, 'x'
   144 0000013F 7FCE                        jg      .jmp_default    ; more than 'x'
   145                                  
   146 00000141 2C62                        sub     al, 'b'
   147 00000143 31DB                        xor     ebx, ebx
   148 00000145 88C3                        mov     bl, al
   149                                  
   150 00000147 8B1C9D[00000000]            mov     ebx, [4*ebx + .jmp_table]
   151 0000014E FFE3                        jmp     ebx
   152                                  
   153                                  section .data
   154                                  ; hardcoded jmp table for printf
   155                                  .jmp_table:
   156 00000000 [85010000]                  dd      .bin 
   157 00000004 [2A020000]                  dd      .char
   158 00000008 [50010000]                  dd      .dec
   159 0000000C [A1020000]-                 dd      10 dup(.default)
   159 00000010 [A1020000]-        
   159 00000014 [A1020000]-        
   159 00000018 [A1020000]-        
   159 0000001C [A1020000]-        
   159 00000020 [A1020000]-        
   159 00000024 [A1020000]-        
   159 00000028 [A1020000]-        
   159 0000002C [A1020000]-        
   159 00000030 [A1020000]         
   160 00000034 [BC010000]                  dd      .oct
   161 00000038 [A1020000]-                 dd      3 dup(.default)
   161 0000003C [A1020000]-        
   161 00000040 [A1020000]         
   162 00000044 [50020000]                  dd      .str
   163 00000048 [A1020000]-                 dd      4 dup(.default)
   163 0000004C [A1020000]-        
   163 00000050 [A1020000]-        
   163 00000054 [A1020000]         
   164 00000058 [F3010000]                  dd      .hex
   165                                  ; end of jmp table for printf
   166                                  
   167                                  section .text
   168                                  ; printf
   169                                  .dec:
   170 00000150 58                          pop     eax
   171 00000151 56                          push    esi
   172 00000152 57                          push    edi
   173 00000153 51                          push    ecx
   174 00000154 52                          push    edx
   175                                  
   176 00000155 BF[08000000]                mov     edi, itoaBuff
   177 0000015A B90A000000                  mov     ecx, 10
   178 0000015F E89CFEFFFF                  call    itoa
   179                                      WRITE   itoaBuff, eax
     9                              <1> 
    10 00000164 6A00                <1>  push dword 0
    11 00000166 68[00000000]        <1>  push numCharsWritten
    12 0000016B 50                  <1>  push dword %2
    13 0000016C 68[08000000]        <1>  push dword %1
    14 00000171 FF35[04000000]      <1>  push dword [STDOutputHandle]
    15 00000177 E8(00000000)        <1>  call WriteConsoleA
   180                                  
   181 0000017C 5A                          pop     edx
   182 0000017D 59                          pop     ecx
   183 0000017E 5F                          pop     edi
   184 0000017F 5E                          pop     esi
   185 00000180 E952FFFFFF                  jmp     .printf_loop
   186                                  
   187                                  .bin:
   188                                      PRINT_2N 1
    72 00000185 58                  <1>  pop eax
    73 00000186 56                  <1>  push esi
    74 00000187 57                  <1>  push edi
    75 00000188 51                  <1>  push ecx
    76 00000189 52                  <1>  push edx
    77                              <1> 
    78 0000018A BF[08000000]        <1>  mov edi, itoaBuff
    79 0000018F B901000000          <1>  mov ecx, %1
    80 00000194 30FF                <1>  xor bh, bh
    81 00000196 E8B1FEFFFF          <1>  call itoa2n
    82                              <1>  WRITE itoaBuff, eax
     9                              <2> 
    10 0000019B 6A00                <2>  push dword 0
    11 0000019D 68[00000000]        <2>  push numCharsWritten
    12 000001A2 50                  <2>  push dword %2
    13 000001A3 68[08000000]        <2>  push dword %1
    14 000001A8 FF35[04000000]      <2>  push dword [STDOutputHandle]
    15 000001AE E8(00000000)        <2>  call WriteConsoleA
    83                              <1> 
    84 000001B3 5A                  <1>  pop edx
    85 000001B4 59                  <1>  pop ecx
    86 000001B5 5F                  <1>  pop edi
    87 000001B6 5E                  <1>  pop esi
    88 000001B7 E91BFFFFFF          <1>  jmp .printf_loop
   189                                  
   190                                  .oct:
   191                                      PRINT_2N 3
    72 000001BC 58                  <1>  pop eax
    73 000001BD 56                  <1>  push esi
    74 000001BE 57                  <1>  push edi
    75 000001BF 51                  <1>  push ecx
    76 000001C0 52                  <1>  push edx
    77                              <1> 
    78 000001C1 BF[08000000]        <1>  mov edi, itoaBuff
    79 000001C6 B903000000          <1>  mov ecx, %1
    80 000001CB 30FF                <1>  xor bh, bh
    81 000001CD E87AFEFFFF          <1>  call itoa2n
    82                              <1>  WRITE itoaBuff, eax
     9                              <2> 
    10 000001D2 6A00                <2>  push dword 0
    11 000001D4 68[00000000]        <2>  push numCharsWritten
    12 000001D9 50                  <2>  push dword %2
    13 000001DA 68[08000000]        <2>  push dword %1
    14 000001DF FF35[04000000]      <2>  push dword [STDOutputHandle]
    15 000001E5 E8(00000000)        <2>  call WriteConsoleA
    83                              <1> 
    84 000001EA 5A                  <1>  pop edx
    85 000001EB 59                  <1>  pop ecx
    86 000001EC 5F                  <1>  pop edi
    87 000001ED 5E                  <1>  pop esi
    88 000001EE E9E4FEFFFF          <1>  jmp .printf_loop
   192                                  
   193                                  .hex:
   194                                      PRINT_2N 4
    72 000001F3 58                  <1>  pop eax
    73 000001F4 56                  <1>  push esi
    74 000001F5 57                  <1>  push edi
    75 000001F6 51                  <1>  push ecx
    76 000001F7 52                  <1>  push edx
    77                              <1> 
    78 000001F8 BF[08000000]        <1>  mov edi, itoaBuff
    79 000001FD B904000000          <1>  mov ecx, %1
    80 00000202 30FF                <1>  xor bh, bh
    81 00000204 E843FEFFFF          <1>  call itoa2n
    82                              <1>  WRITE itoaBuff, eax
     9                              <2> 
    10 00000209 6A00                <2>  push dword 0
    11 0000020B 68[00000000]        <2>  push numCharsWritten
    12 00000210 50                  <2>  push dword %2
    13 00000211 68[08000000]        <2>  push dword %1
    14 00000216 FF35[04000000]      <2>  push dword [STDOutputHandle]
    15 0000021C E8(00000000)        <2>  call WriteConsoleA
    83                              <1> 
    84 00000221 5A                  <1>  pop edx
    85 00000222 59                  <1>  pop ecx
    86 00000223 5F                  <1>  pop edi
    87 00000224 5E                  <1>  pop esi
    88 00000225 E9ADFEFFFF          <1>  jmp .printf_loop
   195                                  
   196                                  .char:
   197 0000022A 58                          pop     eax
   198 0000022B A2[08000000]                mov     [itoaBuff], al
   199 00000230 51                          push    ecx
   200                                      WRITE   itoaBuff, 1
     9                              <1> 
    10 00000231 6A00                <1>  push dword 0
    11 00000233 68[00000000]        <1>  push numCharsWritten
    12 00000238 6A01                <1>  push dword %2
    13 0000023A 68[08000000]        <1>  push dword %1
    14 0000023F FF35[04000000]      <1>  push dword [STDOutputHandle]
    15 00000245 E8(00000000)        <1>  call WriteConsoleA
   201 0000024A 59                          pop     ecx
   202 0000024B E987FEFFFF                  jmp     .printf_loop
   203                                  
   204                                  .str:
   205 00000250 58                          pop     eax
   206 00000251 56                          push    esi
   207 00000252 57                          push    edi
   208 00000253 51                          push    ecx
   209                                  
   210 00000254 89C6                        mov     esi, eax
   211 00000256 89C7                        mov     edi, eax
   212 00000258 E857FEFFFF                  call    strlen
   213                                  
   214                                      WRITE   esi, eax
     9                              <1> 
    10 0000025D 6A00                <1>  push dword 0
    11 0000025F 68[00000000]        <1>  push numCharsWritten
    12 00000264 50                  <1>  push dword %2
    13 00000265 56                  <1>  push dword %1
    14 00000266 FF35[04000000]      <1>  push dword [STDOutputHandle]
    15 0000026C E8(00000000)        <1>  call WriteConsoleA
   215                                  
   216 00000271 59                          pop     ecx
   217 00000272 5F                          pop     edi
   218 00000273 5E                          pop     esi
   219                                  
   220 00000274 E95EFEFFFF                  jmp     .printf_loop
   221                                  
   222                                  .percent:
   223 00000279 83EA04                      sub     edx, 4
   224 0000027C C605[08000000]25            mov     byte [itoaBuff], '%'
   225                                      WRITE   itoaBuff, 1
     9                              <1> 
    10 00000283 6A00                <1>  push dword 0
    11 00000285 68[00000000]        <1>  push numCharsWritten
    12 0000028A 6A01                <1>  push dword %2
    13 0000028C 68[08000000]        <1>  push dword %1
    14 00000291 FF35[04000000]      <1>  push dword [STDOutputHandle]
    15 00000297 E8(00000000)        <1>  call WriteConsoleA
   226 0000029C E936FEFFFF                  jmp     .printf_loop
   227                                  
   228                                  .default:
   229 000002A1 83EA04                      sub     edx, 4
   230 000002A4 E92EFEFFFF                  jmp     .printf_loop
   231                                  
   232                                  ; end of printf
   233                                  
   234 000002A9 5052494E5446464646-         str_to_printf db "PRINTFFFF %d was not %b and %c so it is %s and %x but not %o (not 0)", 10, "a", 0
   234 000002B2 20256420776173206E-
   234 000002BB 6F7420256220616E64-
   234 000002C4 20256320736F206974-
   234 000002CD 20697320257320616E-
   234 000002D6 642025782062757420-
   234 000002DF 6E6F7420256F20286E-
   234 000002E8 6F742030290A6100   
   235 000002F0 736F6D652073747200          str_wr        db "some str", 0
   236                                  
   237 000002F9 4445420A00                  DEBSTR db "DEB", 10, 0
