     1                                  global _start
     2                                  
     3                                  extern GetStdHandle
     4                                  extern WriteConsoleA
     5                                  extern ExitProcess
     6                                  
     7                                  ; First arg is str and second is length
     8                                  %macro WRITE 2
     9                                  ; WriteConsole( STD_OUTPUT_HANDLE, strbuffer, numofchar, numwritten, double 0)
    10                                          push    dword 0         
    11                                          push    numCharsWritten
    12                                          push    dword %2    
    13                                          push    dword %1             
    14                                          push    dword    [STDOutputHandle]
    15                                          call    WriteConsoleA
    16                                  %endmacro ; WRITE
    17                                  
    18                                  section .data
    19 00000000 78656C6C6F2C20776F-             str:     db 'xello, world!', 0x0D, 0x0A, 0 ; \r\n\0
    19 00000009 726C64210D0A00     
    20                                          strLen:  equ $-str
    21                                  
    22                                  section .bss
    23 00000000 ????????                        numCharsWritten:        resd 1
    24 00000004 ????????                        STDOutputHandle         resd 1
    25                                  
    26 00000008 <res 28h>                       itoaBuff                resb 40 ; because 32 + some buffer space
    27                                  section .text
    28                                  
    29                                  %include "itoa.asm"
    30                              <1> ;------------------------------------------------
    31                              <1> ; ITOA
    32                              <1> ; Translates unsigned bx number to str pointed by di with base cx and places $ at the end
    33                              <1> ;   edi - ptr of str to be written
    34                              <1> ;   ecx - base
    35                              <1> ;   eax - number to be translated
    36                              <1> ; CHANGED: ebx, edx, edi, esi
    37                              <1> ; RETURNED: eax - length
    38                              <1> ;------------------------------------------------
    39                              <1> itoa:
    40 00000000 39C8                <1>     cmp eax, ecx
    41 00000002 7F12                <1>     jg .main_itoa
    42                              <1> 
    43 00000004 8A90[A4000000]      <1>     mov dl, [eax + XlatTable]
    44 0000000A 8817                <1>     mov [edi], dl
    45 0000000C C6470100            <1>     mov byte [edi+1], 0
    46 00000010 B801000000          <1>     mov eax, 1
    47 00000015 C3                  <1>     ret
    48                              <1> 
    49                              <1> .main_itoa:
    50 00000016 89FE                <1>     mov esi, edi
    51                              <1> 
    52                              <1>     .loop:
    53 00000018 BA00000000          <1>         mov edx, 0
    54 0000001D F7F1                <1>         div ecx              ; eax = edx:eax div ecx, edx = edx:eax % ecx
    55 0000001F 89D3                <1>         mov ebx, edx
    56 00000021 8A93[A4000000]      <1>         mov dl, [ebx + XlatTable]
    57                              <1> 
    58 00000027 8817                <1>         mov [edi], dl
    59 00000029 47                  <1>         inc edi
    60                              <1> 
    61 0000002A 83F800              <1>         cmp eax, 0
    62 0000002D 7402                <1>         je .end_loop
    63 0000002F EBE7                <1>     jmp .loop
    64                              <1> 
    65                              <1> .end_loop:
    66 00000031 89F9                <1>     mov ecx, edi
    67 00000033 29F1                <1>     sub ecx, esi
    68 00000035 D1E9                <1>     shr ecx, 1
    69 00000037 C60700              <1>     mov byte [edi], 0
    70 0000003A 89FA                <1>     mov edx, edi
    71 0000003C 29F2                <1>     sub edx, esi
    72 0000003E 4F                  <1>     dec edi
    73                              <1> 
    74                              <1>     .reverse_ans:
    75 0000003F 8A07                <1>         mov al, [edi]
    76 00000041 8606                <1>         xchg [esi], al
    77 00000043 8807                <1>         mov [edi], al
    78                              <1> 
    79 00000045 4F                  <1>         dec edi
    80 00000046 46                  <1>         inc esi
    81 00000047 E2F6                <1>     loop .reverse_ans
    82                              <1> 
    83 00000049 89D0                <1>     mov eax, edx ; returned value is length
    84 0000004B C3                  <1>     ret
    85                              <1> 
    86                              <1> ; end of itoa
    87                              <1> 
    88                              <1> 
    89                              <1> ;------------------------------------------------
    90                              <1> ; ITOA2N
    91                              <1> ; Translates unsigned bx number to str pointed by di with base 2^cl and places $ at the end
    92                              <1> ;   di - ptr of str to be written
    93                              <1> ;   cl - power of base
    94                              <1> ;   ax - number to be translated
    95                              <1> ;   bh = 0
    96                              <1> ; CHANGED: bx, dx, di, si
    97                              <1> ;------------------------------------------------
    98                              <1> itoa2n:
    99 0000004C BB01000000          <1>     mov ebx, 1
   100 00000051 D3E3                <1>     shl ebx, cl
   101 00000053 39D8                <1>     cmp eax, ebx
   102 00000055 7F12                <1>     jg .main_itoa2n
   103                              <1> 
   104 00000057 8A90[A4000000]      <1>     mov dl, [eax + XlatTable]
   105 0000005D 8817                <1>     mov [edi], dl
   106 0000005F C6470100            <1>     mov byte [edi+1], 0
   107 00000063 B801000000          <1>     mov eax, 1
   108 00000068 C3                  <1>     ret
   109                              <1> 
   110                              <1> .main_itoa2n:
   111 00000069 89FE                <1>     mov esi, edi
   112 0000006B BA01000000          <1>     mov edx, 1
   113 00000070 D3E2                <1>     shl edx, cl
   114 00000072 4A                  <1>     dec edx                  ; dx = 2^cl - 1
   115                              <1> 
   116                              <1>     .loop:
   117 00000073 89C3                <1>         mov ebx, eax
   118 00000075 21D3                <1>         and ebx, edx          ; bx = ax % 2^cl
   119 00000077 D3E8                <1>         shr eax, cl          ; ax = ax / 2^cl
   120                              <1> 
   121 00000079 8A9B[A4000000]      <1>         mov bl, [ebx + XlatTable]
   122 0000007F 881F                <1>         mov [edi], bl
   123 00000081 47                  <1>         inc edi
   124                              <1> 
   125 00000082 83F800              <1>         cmp eax, 0
   126 00000085 7402                <1>         je .end_loop
   127 00000087 EBEA                <1>     jmp .loop
   128                              <1> 
   129                              <1>     ; TODO is it okay to have copypaste like this?
   130                              <1>     .end_loop:
   131 00000089 89F9                <1>     mov ecx, edi
   132 0000008B 29F1                <1>     sub ecx, esi
   133 0000008D D1E9                <1>     shr ecx, 1
   134 0000008F C60700              <1>     mov byte [edi], 0
   135 00000092 89FA                <1>     mov edx, edi
   136 00000094 29F2                <1>     sub edx, esi
   137 00000096 4F                  <1>     dec edi
   138                              <1> 
   139                              <1>     .reverse:
   140 00000097 8A07                <1>         mov al, [edi]
   141 00000099 8606                <1>         xchg [esi], al
   142 0000009B 8807                <1>         mov [edi], al
   143                              <1> 
   144 0000009D 4F                  <1>         dec edi
   145 0000009E 46                  <1>         inc esi
   146 0000009F E2F6                <1>     loop .reverse
   147                              <1> 
   148 000000A1 89D0                <1>     mov eax, edx ; returned value is length
   149 000000A3 C3                  <1>     ret
   150                              <1> 
   151                              <1> ; end of itoa2n
   152                              <1> 
   153 000000A4 303132333435363738- <1>     XlatTable db '0123456789ABCDEF'
   153 000000AD 39414243444546      <1>
    30                                  
    31                                  _start:
    32                                  
    33                                          ; GetStdHandle( STD_OUTPUT_HANDLE )
    34 000000B4 6AF5                            push    dword -11
    35 000000B6 E8(00000000)                    call    GetStdHandle ; returns in eax
    36 000000BB A3[04000000]                    mov [STDOutputHandle], eax
    37                                  
    38 000000C0 B903000000                      mov ecx, 3
    39 000000C5 BF[08000000]                    mov edi, itoaBuff
    40 000000CA B875100000                      mov eax, 4213
    41 000000CF E878FFFFFF                      call itoa2n
    42                                  
    43                                          WRITE itoaBuff, eax
     9                              <1> 
    10 000000D4 6A00                <1>  push dword 0
    11 000000D6 68[00000000]        <1>  push numCharsWritten
    12 000000DB 50                  <1>  push dword %2
    13 000000DC 68[08000000]        <1>  push dword %1
    14 000000E1 FF35[04000000]      <1>  push dword [STDOutputHandle]
    15 000000E7 E8(00000000)        <1>  call WriteConsoleA
    44                                  
    45                                          ; ExitProcess( 0 )
    46 000000EC 6A00                            push    dword 0   
    47 000000EE E8(00000000)                    call    ExitProcess
    48                                          
