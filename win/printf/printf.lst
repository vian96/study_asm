     1                                  global _start
     2                                  
     3                                  extern GetStdHandle
     4                                  extern WriteConsoleA
     5                                  extern ExitProcess
     6                                  
     7                                  ; First arg is str and second is length
     8                                  %macro WRITE 2
     9                                  ; WriteConsole( STD_OUTPUT_HANDLE, strbuffer, numofchar, numwritten, double 0)
    10                                          push    dword 0         
    11                                          push    numCharsWritten
    12                                          push    dword %2    
    13                                          push    dword %1             
    14                                          push    dword    [STDOutputHandle]
    15                                          call    WriteConsoleA
    16                                  %endmacro ; WRITE
    17                                  
    18                                  section .data
    19 00000000 78656C6C6F2C20776F-             str:     db 'xello, world!', 0x0D, 0x0A, 0 ; \r\n\0
    19 00000009 726C64210D0A00     
    20                                          strLen:  equ $-str
    21                                  
    22                                  section .bss
    23 00000000 ????????                        numCharsWritten:        resd 1
    24 00000004 ????????                        STDOutputHandle         resd 1
    25                                  
    26                                  section .text
    27                                  
    28                                  ;------------------------------------------------
    29                                  ; ITOA
    30                                  ; Translates unsigned bx number to str pointed by di with base cx and places $ at the end
    31                                  ;   di - ptr of str to be written
    32                                  ;   cx - base
    33                                  ;   ax - number to be translated
    34                                  ; CHANGED: bx, dx, di, si
    35                                  ;------------------------------------------------
    36                                  itoa:
    37                                      ; TODO check if number is zero
    38                                      ; TODO check if it works properly on 1 integer number
    39 00000000 89FE                        mov esi, edi
    40                                  
    41                                      .loop:
    42 00000002 BA00000000                      mov edx, 0
    43 00000007 F7F1                            div ecx              ; eax = edx:eax div ecx, edx = edx:eax % ecx
    44 00000009 89D3                            mov ebx, edx
    45 0000000B 8A93[30000000]                  mov dl, [ebx + XlatTable]
    46                                  
    47 00000011 8817                            mov [edi], dl
    48 00000013 47                              inc edi
    49                                  
    50 00000014 83F800                          cmp eax, 0
    51 00000017 7402                            je .end_loop
    52 00000019 EBE7                        jmp .loop
    53                                  
    54                                  .end_loop:
    55 0000001B 89F9                        mov ecx, edi
    56 0000001D 29F1                        sub ecx, esi
    57 0000001F D1E9                        shr ecx, 1
    58 00000021 C60724                      mov byte [edi], '$'
    59 00000024 4F                          dec edi
    60                                  
    61                                      .reverse_ans:
    62 00000025 8A07                            mov al, [edi]
    63 00000027 8606                            xchg [esi], al
    64 00000029 8807                            mov [edi], al
    65                                  
    66 0000002B 4F                              dec edi
    67 0000002C 46                              inc esi
    68 0000002D E2F6                        loop .reverse_ans
    69                                  
    70 0000002F C3                          ret
    71                                  
    72 00000030 303132333435363738-         XlatTable db '0123456789ABCDEF'
    72 00000039 39414243444546     
    73                                  
    74                                  ; end of itoa
    75                                  
    76                                  _start:
    77                                  
    78                                          ; GetStdHandle( STD_OUTPUT_HANDLE )
    79 00000040 6AF5                            push    dword -11
    80 00000042 E8(00000000)                    call    GetStdHandle ; returns in eax
    81 00000047 A3[04000000]                    mov [STDOutputHandle], eax
    82                                  
    83                                          WRITE str, strLen
     9                              <1> 
    10 0000004C 6A00                <1>  push dword 0
    11 0000004E 68[00000000]        <1>  push numCharsWritten
    12 00000053 6A10                <1>  push dword %2
    13 00000055 68[00000000]        <1>  push dword %1
    14 0000005A FF35[04000000]      <1>  push dword [STDOutputHandle]
    15 00000060 E8(00000000)        <1>  call WriteConsoleA
    84                                  
    85                                          ; ExitProcess( 0 )
    86 00000065 6A00                            push    dword 0   
    87 00000067 E8(00000000)                    call    ExitProcess
    88                                          
