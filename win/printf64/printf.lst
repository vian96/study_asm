     1                                  global _start
     2                                  
     3                                  extern GetStdHandle
     4                                  extern WriteConsoleA
     5                                  extern ExitProcess
     6                                  extern WriteFile
     7                                  
     8                                  ;------------------------------------------------
     9                                  ; First arg is str and second is length
    10                                  ; WARNING: 
    11                                  ; RDX and R8 ARE REWRITEN BEFORE CALL
    12                                  ; It may break if you call write(sth, rdx) 
    13                                  ; CHANGED: rdx, r8, r9, rcx
    14                                  %macro WRITE 2
    15                                      mov     r8, %2
    16                                      mov     rdx, %1
    17                                      ; push    qword 0
    18                                      sub     rsp, 0x98
    19                                  
    20                                  ; I DONT KNOW WHY THIS IS NEEDED
    21                                  ; But windows sometimes resets this
    22                                  ; GetStdHandle( STD_OUTPUT_HANDLE )
    23                                      mov     rcx, -11
    24                                      call    GetStdHandle ; returns in rax
    25                                  
    26                                      mov     rcx, rax
    27                                      mov     r9, numCharsWritten
    28                                      call    WriteFile
    29                                      add     rsp, 0x98
    30                                  %endmacro ; WRITE
    31                                  
    32                                  %define DEB     WRITE DEBSTR, 4
    33                                  
    34                                  section .data
    35 00000000 78656C6C6F2C20776F-             str:     db 'xello, world!', 0x0D, 0x0A, 0 ; \r\n\0
    35 00000009 726C64210D0A00     
    36                                          strLen:  equ $-str
    37                                  
    38                                  section .bss
    39 00000000 ????????????????                numCharsWritten     resq 1
    40 00000008 ????????????????                STDOutputHandle     resq 1
    41                                  
    42 00000010 <res 28h>                       itoaBuff            resb 40 ; because 32 + some buffer space
    43 00000038 ????????????????                ret_addr            resq 1
    44                                  
    45                                  
    46                                  section .text
    47                                  
    48                                  %include "itoa.asm"
    49                              <1> ;------------------------------------------------
    50                              <1> ; ITOA
    51                              <1> ; Translates unsigned bx number to str pointed by di with base cx and places $ at the end
    52                              <1> ;   rdi - ptr of str to be written
    53                              <1> ;   ecx - base
    54                              <1> ;   eax - number to be translated
    55                              <1> ; CHANGED: ebx, edx, rdi, rsi
    56                              <1> ; RETURNED: eax - length
    57                              <1> ;------------------------------------------------
    58                              <1> itoa:
    59 00000000 39C8                <1>     cmp eax, ecx
    60 00000002 7F13                <1>     jg .main_itoa
    61                              <1> 
    62 00000004 678A90[C7000000]    <1>     mov dl, [eax + XlatTable]
    63 0000000B 8817                <1>     mov [rdi], dl
    64 0000000D C6470100            <1>     mov byte [rdi+1], 0
    65 00000011 B801000000          <1>     mov eax, 1
    66 00000016 C3                  <1>     ret
    67                              <1> 
    68                              <1> .main_itoa:
    69 00000017 4889FE              <1>     mov rsi, rdi
    70                              <1> 
    71                              <1>     .loop:
    72 0000001A BA00000000          <1>         mov edx, 0
    73 0000001F F7F1                <1>         div ecx              ; eax = edx:eax div ecx, edx = edx:eax % ecx
    74 00000021 89D3                <1>         mov ebx, edx
    75 00000023 678A93[C7000000]    <1>         mov dl, [ebx + XlatTable]
    76                              <1> 
    77 0000002A 8817                <1>         mov [rdi], dl
    78 0000002C 48FFC7              <1>         inc rdi
    79                              <1> 
    80 0000002F 83F800              <1>         cmp eax, 0
    81 00000032 7402                <1>         je .end_loop
    82 00000034 EBE4                <1>     jmp .loop
    83                              <1> 
    84                              <1> .end_loop:
    85 00000036 4889F9              <1>     mov rcx, rdi
    86 00000039 4829F1              <1>     sub rcx, rsi
    87 0000003C 48D1E9              <1>     shr rcx, 1      ; number of loops
    88 0000003F C60700              <1>     mov byte [rdi], 0
    89 00000042 4889FA              <1>     mov rdx, rdi
    90 00000045 4829F2              <1>     sub rdx, rsi    ; gets lenth of string
    91 00000048 48FFCF              <1>     dec rdi
    92                              <1> 
    93                              <1>     .reverse_ans:
    94 0000004B 8A07                <1>         mov al, [rdi]
    95 0000004D 8606                <1>         xchg [rsi], al
    96 0000004F 8807                <1>         mov [rdi], al
    97                              <1> 
    98 00000051 48FFCF              <1>         dec rdi
    99 00000054 48FFC6              <1>         inc rsi
   100 00000057 E2F2                <1>     loop .reverse_ans
   101                              <1> 
   102 00000059 4889D0              <1>     mov rax, rdx ; returned value is length
   103 0000005C C3                  <1>     ret
   104                              <1> 
   105                              <1> ; end of itoa
   106                              <1> 
   107                              <1> 
   108                              <1> ;------------------------------------------------
   109                              <1> ; ITOA2N
   110                              <1> ; Translates unsigned bx number to str pointed by di with base 2^cl and places $ at the end
   111                              <1> ;   di - ptr of str to be written
   112                              <1> ;   cl - power of base
   113                              <1> ;   ax - number to be translated
   114                              <1> ;   bh = 0
   115                              <1> ; CHANGED: bx, dx, di, si
   116                              <1> ;------------------------------------------------
   117                              <1> itoa2n:
   118 0000005D BB01000000          <1>     mov ebx, 1
   119 00000062 D3E3                <1>     shl ebx, cl
   120 00000064 39D8                <1>     cmp eax, ebx
   121 00000066 7F13                <1>     jg .main_itoa2n
   122                              <1> 
   123 00000068 678A90[C7000000]    <1>     mov dl, [eax + XlatTable]
   124 0000006F 8817                <1>     mov [rdi], dl
   125 00000071 C6470100            <1>     mov byte [rdi+1], 0
   126 00000075 B801000000          <1>     mov eax, 1
   127 0000007A C3                  <1>     ret
   128                              <1> 
   129                              <1> .main_itoa2n:
   130 0000007B 4889FE              <1>     mov rsi, rdi
   131 0000007E BA01000000          <1>     mov edx, 1
   132 00000083 D3E2                <1>     shl edx, cl
   133 00000085 FFCA                <1>     dec edx                  ; dx = 2^cl - 1
   134                              <1> 
   135                              <1>     .loop:
   136 00000087 89C3                <1>         mov ebx, eax
   137 00000089 21D3                <1>         and ebx, edx          ; bx = ax % 2^cl
   138 0000008B D3E8                <1>         shr eax, cl          ; ax = ax / 2^cl
   139                              <1> 
   140 0000008D 678A9B[C7000000]    <1>         mov bl, [ebx + XlatTable]
   141 00000094 881F                <1>         mov [rdi], bl
   142 00000096 48FFC7              <1>         inc rdi
   143                              <1> 
   144 00000099 83F800              <1>         cmp eax, 0
   145 0000009C 7402                <1>         je .end_loop
   146 0000009E EBE7                <1>     jmp .loop
   147                              <1> 
   148                              <1>     ; TODO is it okay to have copypaste like this?
   149                              <1>     .end_loop:
   150 000000A0 4889F9              <1>     mov rcx, rdi
   151 000000A3 4829F1              <1>     sub rcx, rsi
   152 000000A6 48D1E9              <1>     shr rcx, 1      ; number of loop
   153 000000A9 C60700              <1>     mov byte [rdi], 0
   154 000000AC 4889FA              <1>     mov rdx, rdi
   155 000000AF 4829F2              <1>     sub rdx, rsi    ; returned value is length
   156 000000B2 48FFCF              <1>     dec rdi
   157                              <1> 
   158                              <1>     .reverse:
   159 000000B5 8A07                <1>         mov al, [rdi]
   160 000000B7 8606                <1>         xchg [rsi], al
   161 000000B9 8807                <1>         mov [rdi], al
   162                              <1> 
   163 000000BB 48FFCF              <1>         dec rdi
   164 000000BE 48FFC6              <1>         inc rsi
   165 000000C1 E2F2                <1>     loop .reverse
   166                              <1> 
   167 000000C3 4889D0              <1>     mov rax, rdx ; returned value is length
   168 000000C6 C3                  <1>     ret
   169                              <1> 
   170                              <1> ; end of itoa2n
   171                              <1> 
   172 000000C7 303132333435363738- <1>     XlatTable db '0123456789ABCDEF'
   172 000000D0 39414243444546      <1>
    49                                  
    50                                  ;------------------------------------------------
    51                                  ; STRLEN
    52                                  ; rdi - source of str
    53                                  ; CHANGED: rcx, rdi, rax, rbx
    54                                  ; RETURN: rax - len
    55                                  ;------------------------------------------------
    56                                  strlen:
    57                                      ; TODO check flags of direction
    58 000000D7 4889FB                      mov     rbx, rdi
    59 000000DA 30C0                        xor     al, al  
    60 000000DC B9FFFFFFFF                  mov     ecx, 0xffffffff
    61                                  
    62 000000E1 F2AE                        repne   scasb   ; while [rdi] != al
    63                                  
    64 000000E3 4829DF                      sub     rdi, rbx     
    65 000000E6 4889F8                      mov     rax, rdi     
    66 000000E9 48FFC8                      dec     rax
    67                                  
    68 000000EC C3                          ret         
    69                                  ; end of strlen 
    70                                  
    71                                  ;------------------------------------------------
    72                                  ; MACRO FOR PRINTF
    73                                  ; Writes rcx symbols from rsi and see code, its simple
    74                                  ;------------------------------------------------
    75                                  %macro WRITE_BUF 0
    76                                      WRITE rdi, rcx
    77                                      xor rcx, rcx
    78                                      mov rdi, rsi
    79                                      add rdi, 2      ; to move from % to actual string
    80                                  %endmacro ; WRITE_BUF
    81                                  
    82                                  ;------------------------------------------------
    83                                  ; PRINTF
    84                                  ; 
    85                                  ; CHANGED: rsi, rax, dl, rcx (ret), rbx
    86                                  ;------------------------------------------------
    87                                  printf:
    88                                      ; si is where we read string
    89 000000ED 59                          pop     rcx
    90 000000EE 48890C25[38000000]          mov     [ret_addr], rcx
    91 000000F6 5E                          pop     rsi
    92 000000F7 4889F7                      mov     rdi, rsi
    93 000000FA 48FFCE                      dec     rsi      ; useful because you do not need to inc it befoure calling loop
    94 000000FD 4831C9                      xor rcx, rcx
    95                                  
    96                                      .printf_loop:
    97 00000100 48FFC6                          inc     rsi
    98 00000103 8A06                            mov     al, [rsi]
    99 00000105 3C25                            cmp     al, '%'
   100 00000107 7459                            je      .codes
   101                                  
   102 00000109 3C00                            cmp     al, 0
   103 0000010B 7405                            je      .ret
   104                                  
   105 0000010D 48FFC1                          inc rcx
   106 00000110 EBEE                            jmp     .printf_loop
   107                                  
   108                                  .ret:
   109                                      WRITE_BUF
    76                              <1>  WRITE rdi, rcx
    15 00000112 4989C8              <2>  mov r8, %2
    16 00000115 4889FA              <2>  mov rdx, %1
    17                              <2> 
    18 00000118 4881EC98000000      <2>  sub rsp, 0x98
    19                              <2> 
    20                              <2> 
    21                              <2> 
    22                              <2> 
    23 0000011F 48C7C1F5FFFFFF      <2>  mov rcx, -11
    24 00000126 E8(00000000)        <2>  call GetStdHandle
    25                              <2> 
    26 0000012B 4889C1              <2>  mov rcx, rax
    27 0000012E 49B9-               <2>  mov r9, numCharsWritten
    27 00000130 [0000000000000000]  <2>
    28 00000138 E8(00000000)        <2>  call WriteFile
    29 0000013D 4881C498000000      <2>  add rsp, 0x98
    77 00000144 4831C9              <1>  xor rcx, rcx
    78 00000147 4889F7              <1>  mov rdi, rsi
    79 0000014A 4883C702            <1>  add rdi, 2
   110 0000014E 488B0C25[38000000]          mov     rcx, [ret_addr]
   111 00000156 51                          push    rcx
   112 00000157 C3                          ret
   113                                  
   114                                  .jmp_percent:
   115 00000158 E9CC020000                  jmp     .percent
   116                                  
   117                                  .jmp_default:
   118 0000015D E910030000                  jmp     .default
   119                                  
   120                                  .codes:
   121                                      WRITE_BUF
    76                              <1>  WRITE rdi, rcx
    15 00000162 4989C8              <2>  mov r8, %2
    16 00000165 4889FA              <2>  mov rdx, %1
    17                              <2> 
    18 00000168 4881EC98000000      <2>  sub rsp, 0x98
    19                              <2> 
    20                              <2> 
    21                              <2> 
    22                              <2> 
    23 0000016F 48C7C1F5FFFFFF      <2>  mov rcx, -11
    24 00000176 E8(00000000)        <2>  call GetStdHandle
    25                              <2> 
    26 0000017B 4889C1              <2>  mov rcx, rax
    27 0000017E 49B9-               <2>  mov r9, numCharsWritten
    27 00000180 [0000000000000000]  <2>
    28 00000188 E8(00000000)        <2>  call WriteFile
    29 0000018D 4881C498000000      <2>  add rsp, 0x98
    77 00000194 4831C9              <1>  xor rcx, rcx
    78 00000197 4889F7              <1>  mov rdi, rsi
    79 0000019A 4883C702            <1>  add rdi, 2
   122                                  
   123 0000019E 48FFC6                      inc     rsi
   124 000001A1 8A06                        mov     al, [rsi]
   125                                  
   126 000001A3 3C25                        cmp     al, '%'
   127 000001A5 74B1                        je      .jmp_percent
   128 000001A7 3C62                        cmp     al, 'b'
   129 000001A9 7CB2                        jl      .jmp_default    ; less than 'b'
   130 000001AB 3C78                        cmp     al, 'x'
   131 000001AD 7FAE                        jg      .jmp_default    ; more than 'x'
   132                                  
   133 000001AF 2C62                        sub     al, 'b'
   134 000001B1 4831DB                      xor     rbx, rbx
   135 000001B4 88C3                        mov     bl, al
   136 000001B6 4889D8                      mov     rax, rbx
   137                                  
   138                                      ; rax is var
   139 000001B9 488D1D0F000000              lea     rbx, [rel .jmp_table] 
   140 000001C0 8B0483                      mov     eax, [rbx + rax*4] 
   141 000001C3 4881EB[CF010000]            sub     rbx, .jmp_table     wrt ..imagebase 
   142 000001CA 4801C3                      add     rbx, rax 
   143 000001CD FFE3                        jmp     rbx 
   144                                  
   145                                  .jmp_table:
   146                                      ; hardcoded jmp table
   147 000001CF [84020000]                  dd      .bin                wrt ..imagebase  
   148 000001D3 [95030000]                  dd      .char               wrt ..imagebase  
   149 000001D7 [2B020000]                  dd      .dec                wrt ..imagebase  
   150 000001DB [72040000]-                 dd      10 dup(.default     wrt ..imagebase)      
   150 000001DF [72040000]-        
   150 000001E3 [72040000]-        
   150 000001E7 [72040000]-        
   150 000001EB [72040000]-        
   150 000001EF [72040000]-        
   150 000001F3 [72040000]-        
   150 000001F7 [72040000]-        
   150 000001FB [72040000]-        
   150 000001FF [72040000]         
   151 00000203 [DF020000]                  dd      .oct                wrt ..imagebase  
   152 00000207 [72040000]-                 dd      3 dup(.default      wrt ..imagebase)       
   152 0000020B [72040000]-        
   152 0000020F [72040000]         
   153 00000213 [E0030000]                  dd      .str                wrt ..imagebase  
   154 00000217 [72040000]-                 dd      4 dup(.default      wrt ..imagebase)  
   154 0000021B [72040000]-        
   154 0000021F [72040000]-        
   154 00000223 [72040000]         
   155 00000227 [3A030000]                  dd      .hex                wrt ..imagebase  
   156                                  
   157                                  .dec:
   158 0000022B 58                          pop     rax
   159 0000022C 56                          push    rsi
   160 0000022D 57                          push    rdi
   161 0000022E 51                          push    rcx
   162                                  
   163 0000022F 48BF-                       mov     rdi, itoaBuff
   163 00000231 [1000000000000000] 
   164 00000239 B90A000000                  mov     rcx, 10
   165 0000023E E8BDFDFFFF                  call    itoa
   166                                      WRITE   itoaBuff, rax
    15 00000243 4989C0              <1>  mov r8, %2
    16 00000246 48BA-               <1>  mov rdx, %1
    16 00000248 [1000000000000000]  <1>
    17                              <1> 
    18 00000250 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 00000257 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 0000025E E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 00000263 4889C1              <1>  mov rcx, rax
    27 00000266 49B9-               <1>  mov r9, numCharsWritten
    27 00000268 [0000000000000000]  <1>
    28 00000270 E8(00000000)        <1>  call WriteFile
    29 00000275 4881C498000000      <1>  add rsp, 0x98
   167                                  
   168 0000027C 59                          pop     rcx
   169 0000027D 5F                          pop     rdi
   170 0000027E 5E                          pop     rsi
   171 0000027F E97CFEFFFF                  jmp     .printf_loop
   172                                  
   173                                  .bin:
   174 00000284 58                          pop     rax
   175 00000285 56                          push    rsi
   176 00000286 57                          push    rdi
   177 00000287 51                          push    rcx
   178                                  
   179 00000288 48BF-                       mov     rdi, itoaBuff
   179 0000028A [1000000000000000] 
   180 00000292 B901000000                  mov     rcx, 1
   181 00000297 30FF                        xor     bh, bh
   182 00000299 E8BFFDFFFF                  call    itoa2n
   183                                      WRITE   itoaBuff, rax
    15 0000029E 4989C0              <1>  mov r8, %2
    16 000002A1 48BA-               <1>  mov rdx, %1
    16 000002A3 [1000000000000000]  <1>
    17                              <1> 
    18 000002AB 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 000002B2 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 000002B9 E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 000002BE 4889C1              <1>  mov rcx, rax
    27 000002C1 49B9-               <1>  mov r9, numCharsWritten
    27 000002C3 [0000000000000000]  <1>
    28 000002CB E8(00000000)        <1>  call WriteFile
    29 000002D0 4881C498000000      <1>  add rsp, 0x98
   184                                  
   185 000002D7 59                          pop     rcx
   186 000002D8 5F                          pop     rdi
   187 000002D9 5E                          pop     rsi
   188 000002DA E921FEFFFF                  jmp     .printf_loop
   189                                  
   190                                  .oct:
   191 000002DF 58                          pop     rax
   192 000002E0 56                          push    rsi
   193 000002E1 57                          push    rdi
   194 000002E2 51                          push    rcx
   195                                  
   196 000002E3 48BF-                       mov     rdi, itoaBuff
   196 000002E5 [1000000000000000] 
   197 000002ED B903000000                  mov     rcx, 3
   198 000002F2 30FF                        xor     bh, bh
   199 000002F4 E864FDFFFF                  call    itoa2n
   200                                      WRITE   itoaBuff, rax
    15 000002F9 4989C0              <1>  mov r8, %2
    16 000002FC 48BA-               <1>  mov rdx, %1
    16 000002FE [1000000000000000]  <1>
    17                              <1> 
    18 00000306 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 0000030D 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 00000314 E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 00000319 4889C1              <1>  mov rcx, rax
    27 0000031C 49B9-               <1>  mov r9, numCharsWritten
    27 0000031E [0000000000000000]  <1>
    28 00000326 E8(00000000)        <1>  call WriteFile
    29 0000032B 4881C498000000      <1>  add rsp, 0x98
   201                                  
   202 00000332 59                          pop     rcx
   203 00000333 5F                          pop     rdi
   204 00000334 5E                          pop     rsi
   205 00000335 E9C6FDFFFF                  jmp     .printf_loop
   206                                  
   207                                  .hex:
   208 0000033A 58                          pop     rax
   209 0000033B 56                          push    rsi
   210 0000033C 57                          push    rdi
   211 0000033D 51                          push    rcx
   212                                  
   213 0000033E 48BF-                       mov     rdi, itoaBuff
   213 00000340 [1000000000000000] 
   214 00000348 B904000000                  mov     rcx, 4
   215 0000034D 30FF                        xor     bh, bh
   216 0000034F E809FDFFFF                  call    itoa2n
   217                                      WRITE   itoaBuff, rax
    15 00000354 4989C0              <1>  mov r8, %2
    16 00000357 48BA-               <1>  mov rdx, %1
    16 00000359 [1000000000000000]  <1>
    17                              <1> 
    18 00000361 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 00000368 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 0000036F E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 00000374 4889C1              <1>  mov rcx, rax
    27 00000377 49B9-               <1>  mov r9, numCharsWritten
    27 00000379 [0000000000000000]  <1>
    28 00000381 E8(00000000)        <1>  call WriteFile
    29 00000386 4881C498000000      <1>  add rsp, 0x98
   218                                  
   219 0000038D 59                          pop     rcx
   220 0000038E 5F                          pop     rdi
   221 0000038F 5E                          pop     rsi
   222 00000390 E96BFDFFFF                  jmp     .printf_loop
   223                                  
   224                                  .char:
   225 00000395 58                          pop     rax
   226 00000396 880425[10000000]            mov     [itoaBuff], al
   227 0000039D 51                          push    rcx
   228                                      WRITE   itoaBuff, 1
    15 0000039E 41B801000000        <1>  mov r8, %2
    16 000003A4 48BA-               <1>  mov rdx, %1
    16 000003A6 [1000000000000000]  <1>
    17                              <1> 
    18 000003AE 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 000003B5 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 000003BC E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 000003C1 4889C1              <1>  mov rcx, rax
    27 000003C4 49B9-               <1>  mov r9, numCharsWritten
    27 000003C6 [0000000000000000]  <1>
    28 000003CE E8(00000000)        <1>  call WriteFile
    29 000003D3 4881C498000000      <1>  add rsp, 0x98
   229 000003DA 59                          pop     rcx
   230 000003DB E920FDFFFF                  jmp     .printf_loop
   231                                  
   232                                  .str:
   233 000003E0 58                          pop     rax
   234 000003E1 56                          push    rsi
   235 000003E2 57                          push    rdi
   236 000003E3 51                          push    rcx
   237                                  
   238 000003E4 4889C6                      mov     rsi, rax
   239 000003E7 4889C7                      mov     rdi, rax
   240 000003EA E8E8FCFFFF                  call    strlen
   241                                  
   242                                      WRITE   rsi, rax
    15 000003EF 4989C0              <1>  mov r8, %2
    16 000003F2 4889F2              <1>  mov rdx, %1
    17                              <1> 
    18 000003F5 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 000003FC 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 00000403 E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 00000408 4889C1              <1>  mov rcx, rax
    27 0000040B 49B9-               <1>  mov r9, numCharsWritten
    27 0000040D [0000000000000000]  <1>
    28 00000415 E8(00000000)        <1>  call WriteFile
    29 0000041A 4881C498000000      <1>  add rsp, 0x98
   243                                  
   244 00000421 59                          pop     rcx
   245 00000422 5F                          pop     rdi
   246 00000423 5E                          pop     rsi
   247                                  
   248 00000424 E9D7FCFFFF                  jmp     .printf_loop
   249                                  
   250                                  .percent:
   251 00000429 C60425[10000000]25          mov     byte [itoaBuff], '%'
   252                                      WRITE   itoaBuff, 1
    15 00000431 41B801000000        <1>  mov r8, %2
    16 00000437 48BA-               <1>  mov rdx, %1
    16 00000439 [1000000000000000]  <1>
    17                              <1> 
    18 00000441 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 00000448 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 0000044F E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 00000454 4889C1              <1>  mov rcx, rax
    27 00000457 49B9-               <1>  mov r9, numCharsWritten
    27 00000459 [0000000000000000]  <1>
    28 00000461 E8(00000000)        <1>  call WriteFile
    29 00000466 4881C498000000      <1>  add rsp, 0x98
   253 0000046D E98EFCFFFF                  jmp     .printf_loop
   254                                  
   255                                  .default:
   256 00000472 E989FCFFFF                  jmp     .printf_loop
   257                                  
   258                                  ; end of printf
   259                                  
   260                                  _start:
   261                                      DEB
    15 00000477 41B804000000        <1>  mov r8, %2
    16 0000047D 48BA-               <1>  mov rdx, %1
    16 0000047F [1C06000000000000]  <1>
    17                              <1> 
    18 00000487 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 0000048E 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 00000495 E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 0000049A 4889C1              <1>  mov rcx, rax
    27 0000049D 49B9-               <1>  mov r9, numCharsWritten
    27 0000049F [0000000000000000]  <1>
    28 000004A7 E8(00000000)        <1>  call WriteFile
    29 000004AC 4881C498000000      <1>  add rsp, 0x98
   262                                      DEB
    15 000004B3 41B804000000        <1>  mov r8, %2
    16 000004B9 48BA-               <1>  mov rdx, %1
    16 000004BB [1C06000000000000]  <1>
    17                              <1> 
    18 000004C3 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 000004CA 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 000004D1 E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 000004D6 4889C1              <1>  mov rcx, rax
    27 000004D9 49B9-               <1>  mov r9, numCharsWritten
    27 000004DB [0000000000000000]  <1>
    28 000004E3 E8(00000000)        <1>  call WriteFile
    29 000004E8 4881C498000000      <1>  add rsp, 0x98
   263                                      DEB
    15 000004EF 41B804000000        <1>  mov r8, %2
    16 000004F5 48BA-               <1>  mov rdx, %1
    16 000004F7 [1C06000000000000]  <1>
    17                              <1> 
    18 000004FF 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 00000506 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 0000050D E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 00000512 4889C1              <1>  mov rcx, rax
    27 00000515 49B9-               <1>  mov r9, numCharsWritten
    27 00000517 [0000000000000000]  <1>
    28 0000051F E8(00000000)        <1>  call WriteFile
    29 00000524 4881C498000000      <1>  add rsp, 0x98
   264                                      DEB
    15 0000052B 41B804000000        <1>  mov r8, %2
    16 00000531 48BA-               <1>  mov rdx, %1
    16 00000533 [1C06000000000000]  <1>
    17                              <1> 
    18 0000053B 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 00000542 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 00000549 E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 0000054E 4889C1              <1>  mov rcx, rax
    27 00000551 49B9-               <1>  mov r9, numCharsWritten
    27 00000553 [0000000000000000]  <1>
    28 0000055B E8(00000000)        <1>  call WriteFile
    29 00000560 4881C498000000      <1>  add rsp, 0x98
   265                                      DEB
    15 00000567 41B804000000        <1>  mov r8, %2
    16 0000056D 48BA-               <1>  mov rdx, %1
    16 0000056F [1C06000000000000]  <1>
    17                              <1> 
    18 00000577 4881EC98000000      <1>  sub rsp, 0x98
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23 0000057E 48C7C1F5FFFFFF      <1>  mov rcx, -11
    24 00000585 E8(00000000)        <1>  call GetStdHandle
    25                              <1> 
    26 0000058A 4889C1              <1>  mov rcx, rax
    27 0000058D 49B9-               <1>  mov r9, numCharsWritten
    27 0000058F [0000000000000000]  <1>
    28 00000597 E8(00000000)        <1>  call WriteFile
    29 0000059C 4881C498000000      <1>  add rsp, 0x98
   266                                  
   267                                  
   268 000005A3 6A11                        push    qword 17
   269 000005A5 68DE000000                  push    qword 0DEh
   270 000005AA 68[13060000]                push    qword  str_wr
   271 000005AF 6A6A                        push    qword 'j'
   272 000005B1 6A06                        push    qword 6
   273 000005B3 6841050000                  push    qword 1345
   274 000005B8 68[CC050000]                push    qword  str_to_printf
   275 000005BD E82BFBFFFF                  call    printf
   276                                  
   277                                      ; ExitProcess( 0 )
   278 000005C2 B900000000                  mov     rcx, 0   
   279 000005C7 E8(00000000)                call    ExitProcess
   280                                  
   281 000005CC 5052494E5446464646-         str_to_printf db "PRINTFFFF %d was not %b and %c so it is %s and %x but not %o (not 0)", 10, "a", 0
   281 000005D5 20256420776173206E-
   281 000005DE 6F7420256220616E64-
   281 000005E7 20256320736F206974-
   281 000005F0 20697320257320616E-
   281 000005F9 642025782062757420-
   281 00000602 6E6F7420256F20286E-
   281 0000060B 6F742030290A6100   
   282 00000613 736F6D652073747200          str_wr        db "some str", 0
   283                                  
   284 0000061C 4445420A00                  DEBSTR db "DEB", 10, 0
